// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    static Array bitwise_array;
    function void init() {
       let bitwise_array = Array.new(16);
       let bitwise_array[0] = 1;
       let bitwise_array[1] = 2;
       let bitwise_array[2] = 4;
       let bitwise_array[3] = 8;
       let bitwise_array[4] = 16;
       let bitwise_array[5] = 32;
       let bitwise_array[6] = 64;
       let bitwise_array[7] = 128;
       let bitwise_array[8] = 256;
       let bitwise_array[9] = 512;
       let bitwise_array[10] = 1024;
       let bitwise_array[11] = 2048;
       let bitwise_array[12] = 4096;
       let bitwise_array[13] = 8192;
       let bitwise_array[14] = 16384;
       let bitwise_array[15] = 32767 + 1;
       return;
    }

    function bool bit(int x, int i) {
        if ( (x & bitwise_array[i]) = 0 ) {
            return false;
        } else {
            return true;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        var bool is_negtive;

        if ( ((x<0) & (y>0)) | ((x>0) & (y<0)) ) {
            let is_negtive = true;
        } else {
            let is_negtive = false;
        }

        let x = Math.abs(x);
        let y = Math.abs(y);

        let i = 0;
        let shiftedX = x;
        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
	        let i = i + 1;
        }
        if (is_negtive = true) {
            return -sum;
        } else {
            return sum;
        }
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        if ( ((x<0) & (y>0)) | ((x>0) & (y<0)) ) {
            return - Math.do_divide(Math.abs(x),Math.abs(y));

        } else {
            return Math.do_divide(x, y);
        }
    }

    function int do_divide(int x, int y) {
        var int q;

        if(x < y) {return 0;}

        let q = Math.do_divide(x, y + y);

        if ((x - (2 * q * y)) < y) {
            return 2 * q;
        } else {
            return (2 * q) + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        //x must be greater than 0;
        var int y,j;
        var int temp;
        var int temp2;
        let y = 0;
        let j = 7;
        while (j > -1) {
            let temp = y + bitwise_array[j];
            let temp2 = temp * temp;
            //overflow;
            if (~(temp2 > x) & (temp2 > 0)) {
                let y = temp;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if ( a < b ) {
            return a;
        } else {
            return b;
        }
    }
}
