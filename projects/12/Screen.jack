// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static int screen;
    static boolean color;
    static Array bitwise_array;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;
        let bitwise_array = Array.new(16);
        let bitwise_array[0] = 1;
        let bitwise_array[1] = 2;
        let bitwise_array[2] = 4;
        let bitwise_array[3] = 8;
        let bitwise_array[4] = 16;
        let bitwise_array[5] = 32;
        let bitwise_array[6] = 64;
        let bitwise_array[7] = 128;
        let bitwise_array[8] = 256;
        let bitwise_array[9] = 512;
        let bitwise_array[10] = 1024;
        let bitwise_array[11] = 2048;
        let bitwise_array[12] = 4096;
        let bitwise_array[13] = 8192;
        let bitwise_array[14] = 16384;
        let bitwise_array[15] = 32767 + 1;//I wish this would work
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        // 32 * 256 = 8192
        let i = 0;
        while ( i < 8192) {
            let screen[i] = 0;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr;
        var int origin;
        let addr =  (y * 32) + (x/16);
        let origin = screen[addr];
        if (color) {
            //set
            let screen[addr] = origin | bitwise_array[x&15];
        } else {
            //unset
            let screen[addr] = origin & (~bitwise_array[x&15]);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x,y,y_max,x_max;

        var int dy, dx, a, b;
        var int diff;

        if (x1 = x2) {
            let y = Math.min(y1,y2);
            let y_max = Math.max(y1,y2);
            while(y < (y_max+1)) {
                do Screen.drawPixel(x1, y);
                let y = y + 1;
                
            }
            return;
        }

        if (y1 = y2) {
            let x = x1;
            let x = Math.min(x1,x2);
            let x_max = Math.max(x1,x2);
            while(x < x_max) {
                do Screen.drawPixel(x, y1);
                let x = x + 1;
            }
            return;
        }

        let dy = y2 - y1;
        let dx = x2 - x1;

        if ( (dy > 0) & (dx > 0)) {
            while ((a < (dx + 1)) & (b < ( dy + 1))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }

            }
            return;

        } 

        if ((dy < 0) & (dx < 0)) {
            //reverse two pointer, and paint
            do Screen.drawLine(x2, y2, x1, y1);
            return;
        } 

        if ((dy > 0) & (dx < 0)) {
            let dx = -dx;
            while ((a < (dx + 1)) & (b < ( dy + 1))) {
                do Screen.drawPixel(x1 - a, y1 + b);
                if (diff < 0) {
                        let a = a + 1; 
                        let diff = diff + dy;
                    } else {
                        let b = b + 1;
                        let diff = diff - dx;
                    }
            }
        }

        if ((dy < 0 ) & (dx > 0)) {
            let dy = -dy;
            while ((a < (dx + 1)) & (b < ( dy + 1))) {
                do Screen.drawPixel(x1 + a, y1 - b);
                if (diff < 0) {
                        let a = a + 1; 
                        let diff = diff + dy;
                    } else {
                        let b = b + 1;
                        let diff = diff - dx;
                    }
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy; 
        var int i;
        let dy = y2 - y1;
        let i = 0;
        while ( i < dy) {
            do Screen.drawLine(x1, y1+i, x2, y1+i);
            let i = i + 1;
        }
        return;

    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int sqrt_result;
        let dy = -r;
        //dy <= r
        while (dy < (r + 1)) {
            let sqrt_result = Math.sqrt((r*r) - (dy*dy));
            do Screen.drawLine(x - sqrt_result, y + dy, x + sqrt_result, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
