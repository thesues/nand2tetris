// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static int ram;
    static int freelist;
    static int freelist_tail;
    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let freelist = 2048;
        let freelist_tail = 2048;
        //next
        let ram[freelist] = 0;
        //size
        let ram[freelist+1] = 14335;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int p ;
        var int new_block;
        let p = freelist;

        //length
        //ram[p+1]
        //next
        //ram[p]
        /*
        for simple, I only chop the memory from currert block, do not remove the whole node from 
        the linked list
        */

        while (~(p=0)) {
            //ram[p+1] >= size + 2;
            if (ram[p+1] > (size + 1)) {
                //chop the chunk from memory
                let ram[p+1] = ram[p+1] - (size + 2);

                //now we have the allocated memory
                let new_block = p + ram[p+1] - size;
                let ram[new_block] = null;
                let ram[new_block+1] = size;
                return new_block + 2;
            } else {
                let p = ram[p];
            }
        }

        //bad news: there is no free blocks
        //deFrag();
        return null;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int block;
        var int size;
        let block = o - 2;
        //add block to the tail of the list;

        //next to null
        let ram[block] = null;

        //last's next to this block
        let ram[freelist_tail] = block;

        //tail point to this block;
        let freelist_tail = block;
        return;
    }    
}
