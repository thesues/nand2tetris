// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array arr;
    field int length;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let arr = Array.new(maxLength);
        } else {
            let arr = null;

        }
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(arr=null)) {
            do arr.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let arr[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let arr[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i;
        var boolean is_negtive;
        var int sum;
        if ( (length > 0) & (arr[0] = 45)) {
            let is_negtive = true;
            let i = 1;
        } else {
            let is_negtive = false;
            let i = 0;
        }
        while ( (i < length) & (arr[i] > 47) & (arr[i] < 58)) {
            let sum = (sum * 10) + (arr[i] - 48);
            let i = i + 1;
        }
        if (is_negtive) {
            return -sum;
        } else {
            return sum;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var char c;
        let length = 0;
        if (val < 0)  {
            do appendChar(45); // 45 = '-'
            do do_setInt(-val);
        } else {
            do do_setInt(val);
        }
        return;

    }

    method void do_setInt(int val) {
        var char c;
        let c = String.mod(val, 10) + 48;
        if (val < 10) {
            do appendChar(c);
        } else {
            do do_setInt(val / 10);
            do appendChar(c);
        }
        return;

    }

    function int mod(int v, int x) {
        var int y;
        let y = v / x;
        return v - (x * y);
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
